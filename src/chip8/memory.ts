import { RES_X, RES_Y, RAM_SIZE, ROM_START_ADDRESS } from "./chip8";

const fontChip8 = new Uint8Array([
    0xF0, 0x90, 0x90, 0x90, 0xF0,	//0
    0x20, 0x60, 0x20, 0x20, 0x70,	//1
    0x60, 0x90, 0x20, 0x40, 0xF0,	//2
    0xF0, 0x10, 0xF0, 0x10, 0xF0,	//3
    0x90, 0x90, 0xF0, 0x10, 0x10,	//4
    0xF0, 0x80, 0x60, 0x10, 0xE0,	//5
    0xF0, 0x80, 0xF0, 0x90, 0xF0,	//6
    0xF0, 0x10, 0x10, 0x10, 0x10,	//7
    0xF0, 0x90, 0xF0, 0x90, 0xF0,	//8
    0xF0, 0x90, 0xF0, 0x10, 0x10,	//9
    0x60, 0x90, 0xF0, 0x90, 0x90,	//A
    0xE0, 0x90, 0xE0, 0x90, 0xE0,	//B
    0x70, 0x80, 0x80, 0x80, 0x70,	//C
    0xE0, 0x90, 0x90, 0x90, 0xE0,	//D
    0xF0, 0x80, 0xF0, 0x80, 0xF0,	//E
    0xF0, 0x80, 0xF0, 0x80, 0x80	//F
]);

const fontSuperChip = new Uint8Array([
    0x18, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18,	//0
    0x0c, 0x1c, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3e, 0x3e,	//1
    0x3c, 0x7e, 0x66, 0x06, 0x0e, 0x1c, 0x38, 0x70, 0x7e, 0x7e,	//2
    0x3c, 0x7e, 0x66, 0x06, 0x1c, 0x1e, 0x06, 0x66, 0x7e, 0x3c,	//3
    0x0c, 0x1c, 0x1c, 0x3c, 0x2c, 0x6e, 0x7e, 0x0c, 0x0c, 0x1e,	//4
    0x7E, 0x7E, 0x60, 0x60, 0x7c, 0x3E, 0x06, 0x66, 0x7C, 0x38,	//5
    0x1c, 0x3c, 0x70, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x3C, 0x18,	//6
    0x7E, 0x7E, 0x06, 0x06, 0x0c, 0x1c, 0x38, 0x30, 0x30, 0x30,	//7
    0x18, 0x3c, 0x66, 0x66, 0x3c, 0x7E, 0x66, 0x66, 0x7e, 0x3C,	//8
    0x3c, 0x7E, 0x66, 0x66, 0x66, 0x3E, 0x06, 0x0E, 0x3C, 0x38,	//9
    0x18, 0x18, 0x3c, 0x24, 0x24, 0x66, 0x7E, 0x66, 0x66, 0x66,	//A
    0x7C, 0x7E, 0x66, 0x66, 0x7C, 0x7E, 0x66, 0x66, 0x7E, 0x7C,	//B
    0x1c, 0x3E, 0x76, 0x60, 0x60, 0x60, 0x60, 0x76, 0x3E, 0x1C,	//C
    0x7C, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x7C,	//D
    0x7E, 0x7E, 0x60, 0x60, 0x7C, 0x7C, 0x60, 0x60, 0x7e, 0x7e,	//E
    0x7E, 0x7E, 0x60, 0x60, 0x7C, 0x7C, 0x60, 0x60, 0x60, 0x60	//F
]);

export class Memory {

    public readonly RAM: Uint8Array;
    public readonly VRAM: Uint8Array;

    constructor(romData: Uint8Array) {
        this.RAM = new Uint8Array(RAM_SIZE);
        this.VRAM = new Uint8Array(RES_X * RES_Y);

        this.ClearRAM();
        this.ClearVRAM();
        this.LoadFontsInRAM();
        this.LoadROMInRAM(romData);
    }

    public ClearVRAM(): void {
        let size = RES_X * RES_Y;
        for (let n = 0; n < size; n++) this.VRAM[n] = 0;
    }

    public GetPixel(x: number, y: number): number {
        return this.VRAM[RES_X * y + x];
    }

    public SetPixel(x: number, y: number): void {
        this.VRAM[RES_X * y + x] ^= 1;
    }

    public SetPixelValue(x: number, y: number, value: number): void {
        this.VRAM[RES_X * y + x] = value;
    }

    private LoadROMInRAM(romData: Uint8Array): void {
        for (let n = 0; n < romData.length; n++) this.RAM[ROM_START_ADDRESS + n] = romData[n];
    }

    private ClearRAM(): void {
        for (let n = 0; n < RAM_SIZE; n++) this.RAM[n] = 0;
    }

    private LoadFontsInRAM(): void {
        for (let n = 0; n < 80; n++) this.RAM[n] = fontChip8[n];
        for (let n = 0; n < 160; n++) this.RAM[n + 80] = fontSuperChip[n];
    }
}